#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use File::HomeDir;
use File::Path qw(make_path);
use File::Slurp;
use LJ::Simple;
use JSON;

# FIXME: Possibly we should separate config and cache

my $opt_run = undef;
my $opt_list = 0;
my $opt_add = undef;
my $opt_del = undef;
my $opt_group = undef;

my $options = GetOptions (
		'r|run=s' => \$opt_run, 
		'a|add=s' => \$opt_add,
		'd|delete=s'  => \$opt_del,
		'l|list' => \$opt_list,
		'g|group=s', => \$opt_group,
	);

my $config;
my $config_file;

sub load_config {
	$config_file = $ENV{'XDG_CONFIG_HOME'};
	$config_file = File::HomeDir->my_home . '/.config' unless defined $config_file;
	$config_file .= '/ljferea';
	make_path($config_file) unless -d $config_file;
	$config_file .= '/ljferea.json';
	if (-e $config_file) {
		$config = from_json(read_file($config_file));
	} else {
		$config = {};
	}
}

# Returns a directory for caching posts from the given site.
# Creates it if necessary.
sub cache_dir {
	my ($site) = @_;

	$site = lc $site;
	die "Site $site contains invalid characters!" unless $site =~ /^[a-z][a-z\.-]*$/;
	my $cache_file = $ENV{'XDG_CACHE_HOME'};
	$cache_file = File::HomeDir->my_home . '/.cache' unless defined $cache_file;

	$cache_file .= "/ljferea/$site/";

	make_path($cache_file) unless -d $cache_file;

	return $cache_file;
}

sub save_config {
	die "need a filename" unless defined $config_file;
	my $temp_file = "$config_file.1";
	write_file ($temp_file, to_json($config));
	rename($temp_file, $config_file) or die "Couldn't rename $temp_file";
}

sub do_list {
	if (scalar(%$config)) {
		for (sort keys %$config) {
			print "$_\n";
		}
	} else {
		print "No sites to list. Add one with the -a option.\n";
	}
}

# Asks the server whether we should get our friends list
# (as opposed to using the cache). If we've already asked
# recently, the answer will automatically be false without
# polling the server. (This is required by the API.)
# XXX Possibly delete this; we don't stick around for
# XXX long enough to use it
sub check_friends {
	my ($site, $lj) = @_;

	unless ($config->{$site}) {
		print "Sorry, I don't know about $site.\n";
		return;
	}

	my $cfnext = 0;
	$cfnext = $config->{$site}->{'cfnext'} if defined $config->{site}->{'cfnext'};

	print "cfnext is $cfnext\n";

	print "too early\n" if $cfnext > time;
	return 0 if $cfnext > time;

	my @cf = $lj->CheckFriends();

	print "undef" unless @cf;
	return 0 unless @cf;

	$config->{$site}->{'cfnext'} = time + $cf[1];
	save_config();

	return $cf[0];
}

sub get_friends {
	my ($lj, $group) = @_;

	my @result;

	my @friends = $lj->GetFriends();
	shift @friends; # it unaccountably adds a length at the start

	for my $user (@friends) {
		my $name = $user->{'user'};

		push @result, $name if
			!defined $group ||
			grep { $_ eq $group } @{$user->{'groups'}};
	}

	return @result;
}

sub cache_entries {
	my ($site) = @_;

	my @posts;

	print "Checking $site\n";

	my $lj = new LJ::Simple ({
			user => $config->{$site}->{'username'},
			pass => $config->{$site}->{'password'},
			site => $site,
			});
	die "Sorry, couldn't log in to $site: $LJ::Simple::error\n" unless $lj;

	my $cache_file = cache_dir($site);

	my @friends = get_friends($lj, $opt_group);

	for my $friend (@friends) {
		print "Getting entries for $friend\n";

		my $start_time = time;
		my $friend_cache_file = "$cache_file/$friend.json";
		my $friend_cache = {};
		$friend_cache = from_json(read_file($friend_cache_file))
			if -r $friend_cache_file;
		my $synctime = $friend_cache->{'start_time'};
		$synctime = 0 unless defined $synctime;

		my @since;

		if ($synctime) {
			@since = ('sync', $synctime);
		} else {
			@since = ('lastn', 50, time);
		}

		my %temp;
		$lj->GetEntries(\%temp, $friend, @since);
		@posts = (@posts, values %temp);

		if ($LJ::Simple::error) {
			die "Sorry, can't get entries from $site for $friend - $LJ::Simple::error\n";
		}

		write_file ($friend_cache_file,
			to_json( { start_time => $start_time } ));
	}

	for my $post (@posts) {
		my $friend = $post->{'usejournal'};
		next unless $friend;
		next if $friend =~ /[\/\\\.-]/;

		my $itemid = $post->{'__itemid'};
		next unless $itemid;

		write_file ("$cache_file/$friend-$itemid.json",
			to_json($post));
	}
}

sub do_run {
	my ($site) = @_;

	unless ($config->{$site}) {
		print "Sorry, I don't know about $site.\n";
		return;
	}

	cache_entries($site);
}

sub do_add {
	my ($site) = @_;

	if ($config->{$site}) {
		print "Sorry, I already know about $site. You can delete it with the -d option.\n";
		return;
	}

	print "Adding a site for $site. Please make sure that this is\n";
	print "a real hostname. 'www.livejournal.com' would be a good choice;\n";
	print "so would 'www.dreamwidth.org'.\n";
	print "\n";
	print "Please give your username on $site:\n";
	my $username = <STDIN>;
	chomp $username;
# FIXME: How hard would it be not to echo it?
	print "Please give your password on $site:\n";
	my $password = <STDIN>;
	chomp $password;

	print "\n";
	print "Lovely. Attempting to log you in.\n";

	my $lj = new LJ::Simple ({
			user    =>      $username,
			pass    =>      $password,
			site    =>      $site,
			});

	if (defined $lj) {

		$config->{$site} = {
			username => $username,
			password => $password,
		};

		save_config();

		print "Success! You should be able to view your friends page now.\n";

	} else {
		print "That didn't work. The site said:\n";
		print $LJ::Simple::error, "\n";
		print "Please try again.\n";
	}
}

sub do_del {
	my ($site) = @_;

	unless ($config->{$site}) {
		print "Sorry, I don't know about $site.\n";
		return;
	}

	undef $config->{$site};
	save_config();
	print "I have forgotten all about $site.\n";
}

load_config();

# FIXME: Here we should check whether our parent is liferea, and
# set run=1 if so.

# FIXME: Die if our parent is apache.

if (!$opt_run && !$opt_add && !$opt_del && !$opt_list) {
	print "ljferea - read your friends page on LiveJournal, Dreamwidth, etc., in a local feed reader\n";
	print "\n";
	print "Options:\n";
	print "  -a SITENAME    add SITENAME to the database\n";
	print "  -d SITENAME    remove SITENAME from the database\n";
	print "  -r SITENAME    actually produce the feed (to stdout)\n";
	print "  -g GROUP       restrict to the named friends group\n";

	exit(1);
}

do_run($opt_run) if $opt_run;
do_list() if $opt_list;
do_add($opt_add) if $opt_add;
do_del($opt_del) if $opt_del;

